{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMw41t18Ku8z8wayB//GyrF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":21,"metadata":{"id":"HMldBCt4DPyq","colab":{"base_uri":"https://localhost:8080/","height":176},"executionInfo":{"status":"ok","timestamp":1672919222358,"user_tz":-480,"elapsed":296,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"outputId":"85bc1203-8058-4885-a502-9c717c988627"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  fivegroup  Nucleotide Protein         Effect  ChartNo.  Sex  diagnosedage  \\\n","1    nonCDS  c.T1837+9A     NaN  Transcription   5605837    1          34.8   \n","2    nonCDS   c.G247+1A     NaN  Transcription   5164803    0          34.0   \n","\n","   Height  Weight        BMI       BSA  Aoroot  Zscore  FH  heart  \\\n","1   173.0    71.0  23.722811  1.847145    5.08    6.71   0      1   \n","2   176.0    63.0  20.338326  1.754993    3.38    1.28   1      0   \n","\n","   systemicscore  eye  \n","1              1    0  \n","2              1    0  "],"text/html":["\n","  <div id=\"df-bbce6b07-4fdd-4e43-b229-d10443cf5f8c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fivegroup</th>\n","      <th>Nucleotide</th>\n","      <th>Protein</th>\n","      <th>Effect</th>\n","      <th>ChartNo.</th>\n","      <th>Sex</th>\n","      <th>diagnosedage</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>BMI</th>\n","      <th>BSA</th>\n","      <th>Aoroot</th>\n","      <th>Zscore</th>\n","      <th>FH</th>\n","      <th>heart</th>\n","      <th>systemicscore</th>\n","      <th>eye</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>nonCDS</td>\n","      <td>c.T1837+9A</td>\n","      <td>NaN</td>\n","      <td>Transcription</td>\n","      <td>5605837</td>\n","      <td>1</td>\n","      <td>34.8</td>\n","      <td>173.0</td>\n","      <td>71.0</td>\n","      <td>23.722811</td>\n","      <td>1.847145</td>\n","      <td>5.08</td>\n","      <td>6.71</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>nonCDS</td>\n","      <td>c.G247+1A</td>\n","      <td>NaN</td>\n","      <td>Transcription</td>\n","      <td>5164803</td>\n","      <td>0</td>\n","      <td>34.0</td>\n","      <td>176.0</td>\n","      <td>63.0</td>\n","      <td>20.338326</td>\n","      <td>1.754993</td>\n","      <td>3.38</td>\n","      <td>1.28</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbce6b07-4fdd-4e43-b229-d10443cf5f8c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bbce6b07-4fdd-4e43-b229-d10443cf5f8c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bbce6b07-4fdd-4e43-b229-d10443cf5f8c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}],"source":["import pandas as pd\n","df = pd.read_csv('155 fivegroup.txt',sep=\"\\t\")\n","# df = pd.read_csv('wdbc.data', header=None)\n","#df.columns = ['age', 'workclass', 'fnlwgt', 'education']\n","dfheart= df[1:3]\n","dfheart"]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2yZyC8PlTJvW","executionInfo":{"status":"ok","timestamp":1672919222793,"user_tz":-480,"elapsed":9,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"outputId":"79fc5686-985b-4f59-c576-729de96ebf19"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(155, 17)"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["import numpy as np\n","# change marked'?' to 'nan'\n","df = df.replace(' ?',np.nan)"],"metadata":{"id":"DX5b0mmkTJzH","executionInfo":{"status":"ok","timestamp":1672919222794,"user_tz":-480,"elapsed":9,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["#one hot\n","dumdf = pd.get_dummies((df.drop(['ChartNo.','Nucleotide','Protein','Effect'], axis=1)))#drop_first:默認為False。是否通過刪除第一級從k個分類級別中取出k-1個虛擬變量。\n","dumdf=dumdf.drop(['fivegroup_noncbEGFlike'], axis=1)\n","print((dumdf))\n","dumdf=pd.DataFrame(dumdf)\n","print(dumdf.shape)\n","print(dumdf.iloc[:, 9])\n","dumdf.columns = [\"Sex\",\"diagnosedage\",\"Height\",\"Weight\",\"BMI\",\"BSA\",\"Aoroot\",\"Zscore\",\"FH\",\"heart\",\"systemicscore\",\"eye\",\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\"]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QAClUKmrTJ2W","executionInfo":{"status":"ok","timestamp":1672919222795,"user_tz":-480,"elapsed":10,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"outputId":"fcee6554-7848-4cb9-bd4c-09e5a313cf01"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["     Sex  diagnosedage  Height  Weight        BMI       BSA  Aoroot  Zscore  \\\n","0      0          40.0   173.0    60.0  20.047446  1.698038    5.00    7.50   \n","1      1          34.8   173.0    71.0  23.722811  1.847145    5.08    6.71   \n","2      0          34.0   176.0    63.0  20.338326  1.754993    3.38    1.28   \n","3      1          11.6   165.0    42.0  15.426997  1.387444    2.40   -0.07   \n","4      0          15.6   160.0    44.0  17.187500  1.398412    2.40   -0.14   \n","..   ...           ...     ...     ...        ...       ...     ...     ...   \n","150    1           6.3   126.0    19.0  11.967750  0.815475    2.75    4.67   \n","151    0           4.7   118.0    15.0  10.772766  0.701189    2.28    3.13   \n","152    0          24.5   180.0    45.0  13.888889  1.500000    4.51    6.46   \n","153    0          10.5   176.0    55.0  17.755682  1.639783    3.30    2.28   \n","154    1          10.4   156.0    63.0  25.887574  1.652271    3.24    1.93   \n","\n","     FH  heart  systemicscore  eye  fivegroup_Features  fivegroup_nonCDS  \\\n","0     0      1              1    0                   0                 1   \n","1     0      1              1    0                   0                 1   \n","2     1      0              1    0                   0                 1   \n","3     1      0              0    0                   0                 1   \n","4     1      0              0    0                   0                 1   \n","..   ..    ...            ...  ...                 ...               ...   \n","150   0      1              1    1                   1                 0   \n","151   1      1              1    0                   1                 0   \n","152   0      1              1    0                   1                 0   \n","153   1      1              1    1                   1                 0   \n","154   1      1              1    1                   1                 0   \n","\n","     fivegroup_nonMissense  fivegroup_notFeatures  \n","0                        0                      0  \n","1                        0                      0  \n","2                        0                      0  \n","3                        0                      0  \n","4                        0                      0  \n","..                     ...                    ...  \n","150                      0                      0  \n","151                      0                      0  \n","152                      0                      0  \n","153                      0                      0  \n","154                      0                      0  \n","\n","[155 rows x 16 columns]\n","(155, 16)\n","0      1\n","1      1\n","2      0\n","3      0\n","4      0\n","      ..\n","150    1\n","151    1\n","152    1\n","153    1\n","154    1\n","Name: heart, Length: 155, dtype: int64\n"]}]},{"cell_type":"code","source":["X = (dumdf.loc[:,[\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\",\"Sex\",\"diagnosedage\",\"Height\",\"Weight\",\"BMI\",\"BSA\",\"Aoroot\",\"Zscore\",\"FH\"]].values )# .values\n","XDF= (dumdf.loc[:,[\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\",\"Sex\",\"diagnosedage\",\"Height\",\"Weight\",\"BMI\",\"BSA\",\"Aoroot\",\"Zscore\",\"FH\"]] )#DataFrame format\n","print(type(XDF))\n","#print(X.columns)\n","print(X.shape)\n","y = (dumdf.iloc[:, 9].values) # 9:heart,10:systemicscore,11:eye\n","yDF= (dumdf.iloc[:, 9])#DataFrame format\n","print(y)\n","print(y.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zVxKXDKbTJ5Y","executionInfo":{"status":"ok","timestamp":1672927017566,"user_tz":-480,"elapsed":270,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"outputId":"3eb2e5b6-7532-4c76-d580-36d8c12f6cc4"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","(155, 13)\n","[1 1 0 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1\n"," 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 0 1 0 0 1 1\n"," 1 0 0 0 1 1 1 1 0 1 1 1 1 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1\n"," 1 1 0 0 0 0 1 1 1 0 1 1 0 1 1 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1 1 1\n"," 1 1 1 1 1 1 1]\n","(155,)\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler()\n","X = sc.fit_transform(X)"],"metadata":{"id":"yQyIN8foYIE_","executionInfo":{"status":"ok","timestamp":1672919222796,"user_tz":-480,"elapsed":7,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}}},"execution_count":26,"outputs":[]},{"cell_type":"markdown","source":["# **GridSearchCV  random forest classifier:**"],"metadata":{"id":"ZxFFBswdpbDs"}},{"cell_type":"code","source":["# https://www.kaggle.com/code/sociopath00/random-forest-using-gridsearchcv\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.model_selection import GridSearchCV\n","forest = RandomForestClassifier(random_state=1,n_jobs=-1)\n","param_grid = { \n","    'n_estimators': [200, 500, 800],\n","    'max_features': ['auto', 'sqrt', 'log2'],\n","    'max_depth' : [4,5,6,7,8],\n","    'criterion' :['gini', 'entropy']\n","}\n","CV_forest = GridSearchCV(n_jobs=-1, estimator=forest, param_grid=param_grid, cv=5)\n","CV_forest.fit(X, y)\n","CV_forest.best_params_"],"metadata":{"id":"DUOPJ_lT_K4W","executionInfo":{"status":"ok","timestamp":1672921955362,"user_tz":-480,"elapsed":359868,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e408560f-7086-444b-8393-345e23056f81"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'criterion': 'gini',\n"," 'max_depth': 4,\n"," 'max_features': 'auto',\n"," 'n_estimators': 200}"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["# **Random Forest Classifier -- Feature Importance, 10 fold Cross Validation**"],"metadata":{"id":"_Yn_13xh8l2H"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","from sklearn import model_selection\n","from sklearn.metrics import accuracy_score\n","kfold = model_selection.KFold(n_splits=10,shuffle=True,random_state=1)\n","\n","# fit model on all training data\n","from sklearn.metrics import accuracy_score\n","import sklearn\n","from sklearn import metrics\n","model = RandomForestClassifier(random_state=1,n_jobs=-1,n_estimators=200,max_depth=4,criterion='gini',max_features='auto')\n","model.fit(X,y)\n","# make predictions for test data and evaluate\n","predictions = model.predict(X)\n","# Feature importances\n","importances = model.feature_importances_\n","indices = np.argsort(importances)[::-1]\n","feat_labels = XDF.columns[0:]\n","for f in range(XDF.shape[1]):\n","  print(\"%2d) %-*s %f \" % (f + 1, 30,  feat_labels[indices[f]], importances[indices[f]]))\n","import matplotlib.pyplot as plt\n","plt.title('Feature Importance')\n","plt.bar(range(X.shape[1]),importances[indices],align='center')\n","plt.xticks(range(X.shape[1]),  feat_labels[indices], rotation=90)\n","plt.xlim([-1, 13])\n","plt.tight_layout()\n","plt.show()\n","print(\"\\n\") \n","# Fit model using each importance as a threshold\n","from sklearn.feature_selection import SelectFromModel\n","from numpy import sort    \n","thresholds = sort(model.feature_importances_) \n","print(\"Feature seletion by RandomForestClassifier feature importance\")\n","print([\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\",\"Sex\",\"diagnosedage\",\"Height\",\"Weight\",\"BMI\",\"BSA\",\"Aoroot\",\"Zscore\",\"FH\"])              \n","for thresh in thresholds:\n","  # select features using threshold\n","  selection = SelectFromModel(model, threshold=thresh)#, prefit=True\n","  selection = selection.fit(X, y) \n","  #print出選中的features \n","  features = (pd.DataFrame(X)).columns[selection.get_support(indices = True)]\n","  features = [column for column in (pd.DataFrame(X))[features]]\n","  print(features)\n","  select_X_train = selection.transform(X)\n","  #print(select_X_train)\n","  # train model\n","  selection_model = model\n","  selection_model.fit(select_X_train, y)\n","  # eval model\n","  select_X_test = selection.transform(X)\n","  predictions = selection_model.predict(select_X_test)\n","  accuracy = accuracy_score(y, predictions)\n","  fpr, tpr, thresholds = metrics.roc_curve(y, selection_model.predict(select_X_test))\n","  auc = metrics.auc(fpr, tpr)\n","  #print(\"Thresh=%.4f, n=%d, Accuracy: %.4f, AUC: %.4f\" % (thresh,select_X_train.shape[1],accuracy,auc))\n","  cv_result = model_selection.cross_val_score(model,select_X_train,y,cv=kfold,scoring='roc_auc',n_jobs=-1)\n","  print('Mean CV AUC: %.3f +/- %.3f' % (np.mean(cv_result), np.std(cv_result))) \n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Yt_SjaEWrqWG","executionInfo":{"status":"ok","timestamp":1672927080667,"user_tz":-480,"elapsed":59665,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"outputId":"b719e6e9-9047-44e9-f056-aa3b2410564a"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":[" 1) Zscore                         0.420641 \n"," 2) Aoroot                         0.171965 \n"," 3) BMI                            0.069296 \n"," 4) diagnosedage                   0.065024 \n"," 5) BSA                            0.061926 \n"," 6) Weight                         0.055141 \n"," 7) Height                         0.051937 \n"," 8) nonMissense                    0.044791 \n"," 9) Features                       0.019249 \n","10) notFeatures                    0.016024 \n","11) FH                             0.010199 \n","12) Sex                            0.008814 \n","13) nonCDS                         0.004995 \n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","\n","Feature seletion by RandomForestClassifier feature importance\n","['Features', 'nonCDS', 'nonMissense', 'notFeatures', 'Sex', 'diagnosedage', 'Height', 'Weight', 'BMI', 'BSA', 'Aoroot', 'Zscore', 'FH']\n","[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n","Mean CV AUC: 0.945 +/- 0.062\n","[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n","Mean CV AUC: 0.946 +/- 0.073\n","[0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12]\n","Mean CV AUC: 0.936 +/- 0.075\n","[0, 2, 3, 5, 6, 7, 8, 9, 10, 11]\n","Mean CV AUC: 0.936 +/- 0.076\n","[0, 2, 5, 6, 7, 8, 9, 10, 11]\n","Mean CV AUC: 0.940 +/- 0.070\n","[2, 5, 6, 7, 8, 9, 10, 11]\n","Mean CV AUC: 0.932 +/- 0.063\n","[5, 6, 7, 8, 9, 10, 11]\n","Mean CV AUC: 0.915 +/- 0.083\n","[5, 7, 8, 9, 10, 11]\n","Mean CV AUC: 0.918 +/- 0.084\n","[5, 8, 9, 10, 11]\n","Mean CV AUC: 0.922 +/- 0.086\n","[5, 8, 10, 11]\n","Mean CV AUC: 0.919 +/- 0.096\n","[8, 10, 11]\n","Mean CV AUC: 0.931 +/- 0.088\n","[10, 11]\n","Mean CV AUC: 0.924 +/- 0.091\n","[11]\n","Mean CV AUC: 0.890 +/- 0.133\n"]}]},{"cell_type":"markdown","source":["# **挑特徵**"],"metadata":{"id":"zQNqUjaX9bLZ"}},{"cell_type":"code","source":["X = (dumdf.loc[:,[\"BMI\",\"Zscore\",\"diagnosedage\"]].values )\n","XDF= (dumdf.loc[:,[\"BMI\",\"Zscore\",\"diagnosedage\"]] )\n","X2 = (dumdf.loc[:,[\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\",\"BMI\",\"Zscore\",\"diagnosedage\"]].values )\n","X2DF= (dumdf.loc[:,[\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\",\"BMI\",\"Zscore\",\"diagnosedage\"]] )\n","X3 = (dumdf.loc[:,[\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\",\"Zscore\",\"diagnosedage\"]].values ) \n","X3DF= (dumdf.loc[:,[\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\",\"Zscore\",\"diagnosedage\"]] )"],"metadata":{"id":"YMlisxU29ara","executionInfo":{"status":"ok","timestamp":1672922632378,"user_tz":-480,"elapsed":271,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","model = RandomForestClassifier(random_state=1,n_jobs=-1,max_features='auto',n_estimators=200,max_depth=4,criterion='gini')\n","from sklearn.model_selection import cross_val_score\n","from sklearn import model_selection\n","kfold = model_selection.KFold(n_splits=10,shuffle=True,random_state=1)\n","# fit model on all training data\n","from sklearn import metrics\n","model.fit(X,y)\n","predictions = model.predict(X)\n","importances = model.feature_importances_\n","indices = np.argsort(importances)[::-1]\n","feat_labels = XDF.columns[0:]\n","for f in range(XDF.shape[1]):\n","  print(\"%2d) %-*s %f \" % (f + 1, 30,  feat_labels[indices[f]], importances[indices[f]]))\n","import matplotlib.pyplot as plt\n","plt.title('Feature Importance')\n","plt.bar(range(X.shape[1]),importances[indices],align='center')\n","plt.xticks(range(X.shape[1]),  feat_labels[indices], rotation=90)\n","plt.xlim([-1, 13])\n","plt.tight_layout()\n","plt.show()\n","print(\"\\n\") \n","# Fit model using each importance as a threshold\n","from sklearn.feature_selection import SelectFromModel\n","from numpy import sort    \n","thresholds = sort(model.feature_importances_) \n","print(\"Feature seletion by RandomForestClassifier feature importance\")\n","print([\"BMI\",\"Zscore\",\"diagnosedage\"])              \n","for thresh in thresholds:\n","  selection = SelectFromModel(model, threshold=thresh)#, prefit=True\n","  selection = selection.fit(X, y) \n","  features = (pd.DataFrame(X)).columns[selection.get_support(indices = True)]\n","  features = [column for column in (pd.DataFrame(X))[features]]\n","  print(features)\n","  select_X = selection.transform(X)\n","  selection_model = model\n","  selection_model.fit(select_X, y)\n","  cv_result = model_selection.cross_val_score(model,select_X,y,cv=kfold,scoring='roc_auc',n_jobs=-1)\n","  print('Mean CV AUC: %.3f +/- %.3f' % (np.mean(cv_result), np.std(cv_result))) \n"],"metadata":{"id":"OgBuYWD4LVGP","executionInfo":{"status":"ok","timestamp":1672922648565,"user_tz":-480,"elapsed":14552,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"colab":{"base_uri":"https://localhost:8080/","height":523},"outputId":"960862d6-e50a-4883-a6e6-fd9f038393d2"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":[" 1) Zscore                         0.637477 \n"," 2) diagnosedage                   0.182300 \n"," 3) BMI                            0.180223 \n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","\n","Feature seletion by RandomForestClassifier feature importance\n","['BMI', 'Zscore', 'diagnosedage']\n","[0, 1, 2]\n","Mean CV AUC: 0.911 +/- 0.116\n","[1, 2]\n","Mean CV AUC: 0.931 +/- 0.086\n","[1]\n","Mean CV AUC: 0.890 +/- 0.133\n"]}]},{"cell_type":"code","source":["X=X2\n","XDF=X2DF\n","from sklearn.ensemble import RandomForestClassifier\n","model = RandomForestClassifier(random_state=1,n_jobs=-1,max_features='auto',n_estimators=500,max_depth=4,criterion='gini')\n","from sklearn.model_selection import cross_val_score\n","from sklearn import model_selection\n","kfold = model_selection.KFold(n_splits=10,shuffle=True,random_state=1)\n","# fit model on all training data\n","from sklearn import metrics\n","model.fit(X,y)\n","predictions = model.predict(X)\n","importances = model.feature_importances_\n","indices = np.argsort(importances)[::-1]\n","feat_labels = XDF.columns[0:]\n","for f in range(XDF.shape[1]):\n","  print(\"%2d) %-*s %f \" % (f + 1, 30,  feat_labels[indices[f]], importances[indices[f]]))\n","import matplotlib.pyplot as plt\n","plt.title('Feature Importance')\n","plt.bar(range(X.shape[1]),importances[indices],align='center')\n","plt.xticks(range(X.shape[1]),  feat_labels[indices], rotation=90)\n","plt.xlim([-1, 13])\n","plt.tight_layout()\n","plt.show()\n","print(\"\\n\") \n","# Fit model using each importance as a threshold\n","from sklearn.feature_selection import SelectFromModel\n","from numpy import sort    \n","thresholds = sort(model.feature_importances_) \n","print(\"Feature seletion by RandomForestClassifier feature importance\")\n","print([\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\",\"BMI\",\"Zscore\",\"diagnosedage\"])              \n","for thresh in thresholds:\n","  selection = SelectFromModel(model, threshold=thresh)#, prefit=True\n","  selection = selection.fit(X, y) \n","  features = (pd.DataFrame(X)).columns[selection.get_support(indices = True)]\n","  features = [column for column in (pd.DataFrame(X))[features]]\n","  print(features)\n","  select_X = selection.transform(X)\n","  selection_model = model\n","  selection_model.fit(select_X, y)\n","  cv_result = model_selection.cross_val_score(model,select_X,y,cv=kfold,scoring='roc_auc',n_jobs=-1)\n","  print('Mean CV AUC: %.3f +/- %.3f' % (np.mean(cv_result), np.std(cv_result))) \n"],"metadata":{"id":"shGoT0PoORbZ","executionInfo":{"status":"ok","timestamp":1672922725562,"user_tz":-480,"elapsed":74005,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"colab":{"base_uri":"https://localhost:8080/","height":731},"outputId":"b3f659a2-da1e-4f75-9aa6-3cf94e74c2e6"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":[" 1) Zscore                         0.585401 \n"," 2) diagnosedage                   0.149946 \n"," 3) BMI                            0.138170 \n"," 4) nonMissense                    0.057721 \n"," 5) Features                       0.030877 \n"," 6) notFeatures                    0.027412 \n"," 7) nonCDS                         0.010473 \n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","\n","Feature seletion by RandomForestClassifier feature importance\n","['Features', 'nonCDS', 'nonMissense', 'notFeatures', 'BMI', 'Zscore', 'diagnosedage']\n","[0, 1, 2, 3, 4, 5, 6]\n","Mean CV AUC: 0.936 +/- 0.094\n","[0, 2, 3, 4, 5, 6]\n","Mean CV AUC: 0.936 +/- 0.094\n","[0, 2, 4, 5, 6]\n","Mean CV AUC: 0.932 +/- 0.104\n","[2, 4, 5, 6]\n","Mean CV AUC: 0.919 +/- 0.114\n","[4, 5, 6]\n","Mean CV AUC: 0.911 +/- 0.122\n","[5, 6]\n","Mean CV AUC: 0.933 +/- 0.082\n","[5]\n","Mean CV AUC: 0.864 +/- 0.142\n"]}]},{"cell_type":"code","source":["X=X3\n","XDF=X3DF\n","from sklearn.ensemble import RandomForestClassifier\n","model = RandomForestClassifier(random_state=1,n_jobs=-1,max_features='auto',n_estimators=800,max_depth=4,criterion='gini')\n","from sklearn.model_selection import cross_val_score\n","from sklearn import model_selection\n","kfold = model_selection.KFold(n_splits=10,shuffle=True,random_state=1)\n","# fit model on all training data\n","from sklearn import metrics\n","model.fit(X,y)\n","predictions = model.predict(X)\n","importances = model.feature_importances_\n","indices = np.argsort(importances)[::-1]\n","feat_labels = XDF.columns[0:]\n","for f in range(XDF.shape[1]):\n","  print(\"%2d) %-*s %f \" % (f + 1, 30,  feat_labels[indices[f]], importances[indices[f]]))\n","import matplotlib.pyplot as plt\n","plt.title('Feature Importance')\n","plt.bar(range(X.shape[1]),importances[indices],align='center')\n","plt.xticks(range(X.shape[1]),  feat_labels[indices], rotation=90)\n","plt.xlim([-1, 13])\n","plt.tight_layout()\n","plt.show()\n","print(\"\\n\") \n","# Fit model using each importance as a threshold\n","from sklearn.feature_selection import SelectFromModel\n","from numpy import sort    \n","thresholds = sort(model.feature_importances_) \n","print(\"Feature seletion by RandomForestClassifier feature importance\")\n","print([\"Features\",\"nonCDS\",\"nonMissense\",\"notFeatures\",\"Zscore\",\"diagnosedage\"])              \n","for thresh in thresholds:\n","  selection = SelectFromModel(model, threshold=thresh)#, prefit=True\n","  selection = selection.fit(X, y) \n","  features = (pd.DataFrame(X)).columns[selection.get_support(indices = True)]\n","  features = [column for column in (pd.DataFrame(X))[features]]\n","  print(features)\n","  select_X = selection.transform(X)\n","  selection_model = model\n","  selection_model.fit(select_X, y)\n","  cv_result = model_selection.cross_val_score(model,select_X,y,cv=kfold,scoring='roc_auc',n_jobs=-1)\n","  print('Mean CV AUC: %.3f +/- %.3f' % (np.mean(cv_result), np.std(cv_result))) "],"metadata":{"id":"e1EjoQyzeAIY","executionInfo":{"status":"ok","timestamp":1672926816358,"user_tz":-480,"elapsed":106274,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"colab":{"base_uri":"https://localhost:8080/","height":679},"outputId":"d6de3590-1dfd-4b0c-d407-825e687ad6e9"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":[" 1) Zscore                         0.691543 \n"," 2) diagnosedage                   0.167292 \n"," 3) nonMissense                    0.067558 \n"," 4) Features                       0.031982 \n"," 5) notFeatures                    0.028791 \n"," 6) nonCDS                         0.012834 \n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["\n","\n","Feature seletion by RandomForestClassifier feature importance\n","['Features', 'nonCDS', 'nonMissense', 'notFeatures', 'Zscore', 'diagnosedage']\n","[0, 1, 2, 3, 4, 5]\n","Mean CV AUC: 0.948 +/- 0.067\n","[0, 2, 3, 4, 5]\n","Mean CV AUC: 0.945 +/- 0.066\n","[0, 2, 4, 5]\n","Mean CV AUC: 0.944 +/- 0.075\n","[2, 4, 5]\n","Mean CV AUC: 0.937 +/- 0.073\n","[4, 5]\n","Mean CV AUC: 0.931 +/- 0.086\n","[4]\n","Mean CV AUC: 0.884 +/- 0.137\n"]}]},{"cell_type":"markdown","source":["## **演算法挑選**"],"metadata":{"id":"R2B7TN6jv82y"}},{"cell_type":"code","source":["X=X3\n","XDF=X3DF\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neural_network import MLPClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.svm import SVC\n","from xgboost import XGBClassifier\n","\n","models = []\n","names = ['LR','Random Forest','Neural Network','GaussianNB','DecisionTreeClassifier','SVM','XGBClassifier']\n","models.append((LogisticRegression()))#max_iter=300\n","models.append((RandomForestClassifier(random_state=1)))\n","models.append((MLPClassifier(random_state=1,max_iter=900)))\n","models.append((GaussianNB()))\n","models.append((DecisionTreeClassifier(random_state=1)))\n","models.append((SVC(random_state=1)))\n","models.append((XGBClassifier(random_state=1)))\n","print (models)\n","\n","from sklearn import model_selection\n","from sklearn.metrics import accuracy_score\n","kfold = model_selection.KFold(n_splits=10,shuffle=True,random_state=1)\n","\n","for i in range(0,len(models)): \n","  cv_result = model_selection.cross_val_score(models[i],X,y,cv=kfold,scoring='roc_auc',n_jobs=-1)\n","  print(\"cv_result:\",cv_result)\n","  print('Mean CV AUC: %.3f +/- %.3f' % (np.mean(cv_result), np.std(cv_result)))\n","  models[i].fit(X,y)\n","  prediction = models[i].predict(X)\n","  fpr, tpr, thresholds = metrics.roc_curve(y, prediction)\n","  auc = metrics.auc(fpr, tpr)\n","  print('{0} auc:{1} '.format(names[i],auc))\n","  acc_score = accuracy_score(y,prediction)   \n","  print('{0} acc:{1} '.format(names[i],acc_score))\n","  print(\"*\"*40)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GddVT3fzvwDh","executionInfo":{"status":"ok","timestamp":1672926443641,"user_tz":-480,"elapsed":9371,"user":{"displayName":"KAI CHIU","userId":"13312114761751109780"}},"outputId":"6843ff47-973d-4112-f6bc-286c53bbffe5"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["[LogisticRegression(), RandomForestClassifier(random_state=1), MLPClassifier(max_iter=900, random_state=1), GaussianNB(), DecisionTreeClassifier(random_state=1), SVC(random_state=1), XGBClassifier(random_state=1)]\n","cv_result: [0.94545455 0.87179487 0.75       0.95       0.96666667 0.97222222\n"," 0.82       0.83333333 1.         0.88888889]\n","Mean CV AUC: 0.900 +/- 0.076\n","LR auc:0.7654043645699615 \n","LR acc:0.8387096774193549 \n","****************************************\n","cv_result: [1.         0.92307692 0.92857143 1.         1.         1.\n"," 0.77       0.97222222 1.         0.83333333]\n","Mean CV AUC: 0.943 +/- 0.077\n","Random Forest auc:1.0 \n","Random Forest acc:1.0 \n","****************************************\n","cv_result: [1.         1.         0.96428571 0.98333333 1.         0.97222222\n"," 0.86       0.97222222 1.         0.83333333]\n","Mean CV AUC: 0.959 +/- 0.058\n","Neural Network auc:0.9380616174582799 \n","Neural Network acc:0.9548387096774194 \n","****************************************\n","cv_result: [0.85454545 0.94871795 0.60714286 0.88333333 0.91666667 0.97222222\n"," 0.82       0.72222222 1.         0.88888889]\n","Mean CV AUC: 0.861 +/- 0.114\n","GaussianNB auc:0.8122593068035944 \n","GaussianNB acc:0.8387096774193549 \n","****************************************\n","cv_result: [0.85454545 0.79487179 0.71428571 0.91666667 0.81666667 0.83333333\n"," 0.65       0.91666667 1.         0.66666667]\n","Mean CV AUC: 0.816 +/- 0.108\n","DecisionTreeClassifier auc:1.0 \n","DecisionTreeClassifier acc:1.0 \n","****************************************\n","cv_result: [0.98181818 0.82051282 0.75       0.98333333 0.86666667 0.88888889\n"," 0.8        0.88888889 0.96       0.83333333]\n","Mean CV AUC: 0.877 +/- 0.075\n","SVM auc:0.5 \n","SVM acc:0.7354838709677419 \n","****************************************\n","cv_result: [1.         0.87179487 0.875      1.         1.         0.97222222\n"," 0.78       0.97222222 1.         0.88888889]\n","Mean CV AUC: 0.936 +/- 0.073\n","XGBClassifier auc:0.9956140350877193 \n","XGBClassifier acc:0.9935483870967742 \n","****************************************\n"]}]}]}